AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Project:
    Type: String
  Environment:
    Type: String

Resources: 
# VPC作成
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
      
# igw作成
  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

#  igwのアタッチ     
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref Igw

# public subnet 作成
  Pub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref Vpc
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

# public subnet 作成
  Pub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      VpcId: !Ref Vpc
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

# PublicSubnet用ルートテーブル作成
  RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

#ルート追加 インターネット向け
  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw

  RouteAssocPub1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Pub1
      RouteTableId: !Ref   RouteTable

  RouteAssocPub2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Pub2
      RouteTableId: !Ref RouteTable

  SgAlb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: morpheus-alb-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        # https
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
        # alt https
        - IpProtocol: tcp
          FromPort: 4430
          ToPort: 4430
          CidrIp: '0.0.0.0/0'
        # http
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        # alt http
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  SgEcs:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: morpheus-ecs-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        # http
        - IpProtocol: tcp
          FromPort: 7000
          ToPort: 7000
          SourceSecurityGroupId: !Ref SgAlb
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  # ALB
  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub morpheus-alb
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref SgAlb
      Subnets:
        - !Ref Pub1
        - !Ref Pub2
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  # Tgを2個作る(Blue/Green用)
  Tg1:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref Vpc
      Name: "morpheus-tg1"
      Protocol: HTTP
      Port: 7000
      TargetType: ip
      HealthCheckProtocol: "HTTP"
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 60
      Matcher:
        HttpCode: "200"
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  Tg2:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref Vpc
      Name: "morpheus-tg2"
      Protocol: HTTP
      Port: 7000
      TargetType: ip
      HealthCheckProtocol: "HTTP"
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 60
      Matcher:
        HttpCode: "200"
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  Listener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref Alb
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref Tg1

  Listener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref Alb
      Protocol: HTTP
      Port: 8080
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref Tg2